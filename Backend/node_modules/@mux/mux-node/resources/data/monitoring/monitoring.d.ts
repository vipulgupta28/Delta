import { APIResource } from "../../../resource.js";
import * as Core from "../../../core.js";
import * as MetricsAPI from "./metrics.js";
import { MetricGetBreakdownParams, MetricGetBreakdownResponse, MetricGetBreakdownTimeseriesParams, MetricGetBreakdownTimeseriesResponse, MetricGetHistogramTimeseriesParams, MetricGetHistogramTimeseriesResponse, MetricGetTimeseriesParams, MetricGetTimeseriesResponse, MetricListResponse, Metrics } from "./metrics.js";
export declare class Monitoring extends APIResource {
    metrics: MetricsAPI.Metrics;
    /**
     * Lists available monitoring dimensions.
     *
     * @example
     * ```ts
     * const response =
     *   await client.data.monitoring.listDimensions();
     * ```
     */
    listDimensions(options?: Core.RequestOptions): Core.APIPromise<MonitoringListDimensionsResponse>;
}
export interface MonitoringListDimensionsResponse {
    data: Array<MonitoringListDimensionsResponse.Data>;
    timeframe: Array<number>;
    total_row_count: number | null;
}
export declare namespace MonitoringListDimensionsResponse {
    interface Data {
        display_name: string;
        name: string;
    }
}
export declare namespace Monitoring {
    export { type MonitoringListDimensionsResponse as MonitoringListDimensionsResponse };
    export { Metrics as Metrics, type MetricListResponse as MetricListResponse, type MetricGetBreakdownResponse as MetricGetBreakdownResponse, type MetricGetBreakdownTimeseriesResponse as MetricGetBreakdownTimeseriesResponse, type MetricGetHistogramTimeseriesResponse as MetricGetHistogramTimeseriesResponse, type MetricGetTimeseriesResponse as MetricGetTimeseriesResponse, type MetricGetBreakdownParams as MetricGetBreakdownParams, type MetricGetBreakdownTimeseriesParams as MetricGetBreakdownTimeseriesParams, type MetricGetHistogramTimeseriesParams as MetricGetHistogramTimeseriesParams, type MetricGetTimeseriesParams as MetricGetTimeseriesParams, };
}
//# sourceMappingURL=monitoring.d.ts.map