import { APIResource } from "../../../resource.js";
import * as Core from "../../../core.js";
export declare class Metrics extends APIResource {
    /**
     * Lists available monitoring metrics.
     *
     * @example
     * ```ts
     * const metrics = await client.data.monitoring.metrics.list();
     * ```
     */
    list(options?: Core.RequestOptions): Core.APIPromise<MetricListResponse>;
    /**
     * Gets breakdown information for a specific dimension and metric along with the
     * number of concurrent viewers and negative impact score.
     *
     * @example
     * ```ts
     * const response =
     *   await client.data.monitoring.metrics.getBreakdown(
     *     'current-concurrent-viewers',
     *   );
     * ```
     */
    getBreakdown(monitoringMetricId: 'current-concurrent-viewers' | 'current-rebuffering-percentage' | 'exits-before-video-start' | 'playback-failure-percentage' | 'current-average-bitrate' | 'video-startup-failure-percentage', query?: MetricGetBreakdownParams, options?: Core.RequestOptions): Core.APIPromise<MetricGetBreakdownResponse>;
    getBreakdown(monitoringMetricId: 'current-concurrent-viewers' | 'current-rebuffering-percentage' | 'exits-before-video-start' | 'playback-failure-percentage' | 'current-average-bitrate' | 'video-startup-failure-percentage', options?: Core.RequestOptions): Core.APIPromise<MetricGetBreakdownResponse>;
    /**
     * Gets timeseries of breakdown information for a specific dimension and metric.
     * Each datapoint in the response represents 5 seconds worth of data.
     *
     * @example
     * ```ts
     * const response =
     *   await client.data.monitoring.metrics.getBreakdownTimeseries(
     *     'current-concurrent-viewers',
     *   );
     * ```
     */
    getBreakdownTimeseries(monitoringMetricId: 'current-concurrent-viewers' | 'current-rebuffering-percentage' | 'exits-before-video-start' | 'playback-failure-percentage' | 'current-average-bitrate' | 'video-startup-failure-percentage', query?: MetricGetBreakdownTimeseriesParams, options?: Core.RequestOptions): Core.APIPromise<MetricGetBreakdownTimeseriesResponse>;
    getBreakdownTimeseries(monitoringMetricId: 'current-concurrent-viewers' | 'current-rebuffering-percentage' | 'exits-before-video-start' | 'playback-failure-percentage' | 'current-average-bitrate' | 'video-startup-failure-percentage', options?: Core.RequestOptions): Core.APIPromise<MetricGetBreakdownTimeseriesResponse>;
    /**
     * Gets histogram timeseries information for a specific metric.
     *
     * @example
     * ```ts
     * const response =
     *   await client.data.monitoring.metrics.getHistogramTimeseries(
     *     'video-startup-time',
     *   );
     * ```
     */
    getHistogramTimeseries(monitoringHistogramMetricId: 'video-startup-time', query?: MetricGetHistogramTimeseriesParams, options?: Core.RequestOptions): Core.APIPromise<MetricGetHistogramTimeseriesResponse>;
    getHistogramTimeseries(monitoringHistogramMetricId: 'video-startup-time', options?: Core.RequestOptions): Core.APIPromise<MetricGetHistogramTimeseriesResponse>;
    /**
     * Gets Time series information for a specific metric along with the number of
     * concurrent viewers.
     *
     * @example
     * ```ts
     * const response =
     *   await client.data.monitoring.metrics.getTimeseries(
     *     'current-concurrent-viewers',
     *   );
     * ```
     */
    getTimeseries(monitoringMetricId: 'current-concurrent-viewers' | 'current-rebuffering-percentage' | 'exits-before-video-start' | 'playback-failure-percentage' | 'current-average-bitrate' | 'video-startup-failure-percentage', query?: MetricGetTimeseriesParams, options?: Core.RequestOptions): Core.APIPromise<MetricGetTimeseriesResponse>;
    getTimeseries(monitoringMetricId: 'current-concurrent-viewers' | 'current-rebuffering-percentage' | 'exits-before-video-start' | 'playback-failure-percentage' | 'current-average-bitrate' | 'video-startup-failure-percentage', options?: Core.RequestOptions): Core.APIPromise<MetricGetTimeseriesResponse>;
}
export interface MetricListResponse {
    data: Array<MetricListResponse.Data>;
    timeframe: Array<number>;
    total_row_count: number | null;
}
export declare namespace MetricListResponse {
    interface Data {
        display_name: string;
        name: string;
    }
}
export interface MetricGetBreakdownResponse {
    data: Array<MetricGetBreakdownResponse.Data>;
    timeframe: Array<number>;
    total_row_count: number | null;
}
export declare namespace MetricGetBreakdownResponse {
    interface Data {
        concurrent_viewers: number;
        metric_value: number | null;
        negative_impact: number;
        starting_up_viewers: number;
        value: string | null;
        display_value?: string;
    }
}
export interface MetricGetBreakdownTimeseriesResponse {
    data: Array<MetricGetBreakdownTimeseriesResponse.Data>;
    timeframe: Array<number>;
    total_row_count: number | null;
}
export declare namespace MetricGetBreakdownTimeseriesResponse {
    interface Data {
        date: string;
        values: Array<Data.Value>;
    }
    namespace Data {
        interface Value {
            concurrent_viewers: number;
            metric_value: number | null;
            starting_up_viewers: number;
            value: string | null;
        }
    }
}
export interface MetricGetHistogramTimeseriesResponse {
    data: Array<MetricGetHistogramTimeseriesResponse.Data>;
    meta: MetricGetHistogramTimeseriesResponse.Meta;
    timeframe: Array<number>;
    total_row_count: number | null;
}
export declare namespace MetricGetHistogramTimeseriesResponse {
    interface Data {
        average: number | null;
        bucket_values: Array<Data.BucketValue>;
        max_percentage: number;
        median: number | null;
        p95: number | null;
        sum: number;
        timestamp: string;
    }
    namespace Data {
        interface BucketValue {
            count: number;
            percentage: number;
        }
    }
    interface Meta {
        bucket_unit: string;
        buckets: Array<Meta.Bucket>;
    }
    namespace Meta {
        interface Bucket {
            end: number | null;
            start: number;
        }
    }
}
export interface MetricGetTimeseriesResponse {
    data: Array<MetricGetTimeseriesResponse.Data>;
    timeframe: Array<number>;
    total_row_count: number | null;
}
export declare namespace MetricGetTimeseriesResponse {
    interface Data {
        concurrent_viewers: number;
        date: string;
        value: number | null;
    }
}
export interface MetricGetBreakdownParams {
    /**
     * Dimension the specified value belongs to
     */
    dimension?: 'asn' | 'cdn' | 'country' | 'operating_system' | 'player_name' | 'region' | 'stream_type' | 'sub_property_id' | 'video_series' | 'video_title' | 'view_has_ad';
    /**
     * Limit the results to rows that match conditions from provided key:value pairs.
     * Must be provided as an array query string parameter.
     *
     * To exclude rows that match a certain condition, prepend a `!` character to the
     * dimension.
     *
     * Possible filter names are the same as returned by the List Monitoring Dimensions
     * endpoint.
     *
     * Example:
     *
     * - `filters[]=operating_system:windows&filters[]=!country:US`
     */
    filters?: Array<string>;
    /**
     * Value to order the results by
     */
    order_by?: 'negative_impact' | 'value' | 'views' | 'field';
    /**
     * Sort order.
     */
    order_direction?: 'asc' | 'desc';
    /**
     * Timestamp to limit results by. This value must be provided as a unix timestamp.
     * Defaults to the current unix timestamp.
     */
    timestamp?: number;
}
export interface MetricGetBreakdownTimeseriesParams {
    /**
     * Dimension the specified value belongs to
     */
    dimension?: 'asn' | 'cdn' | 'country' | 'operating_system' | 'player_name' | 'region' | 'stream_type' | 'sub_property_id' | 'video_series' | 'video_title' | 'view_has_ad';
    /**
     * Limit the results to rows that match conditions from provided key:value pairs.
     * Must be provided as an array query string parameter.
     *
     * To exclude rows that match a certain condition, prepend a `!` character to the
     * dimension.
     *
     * Possible filter names are the same as returned by the List Monitoring Dimensions
     * endpoint.
     *
     * Example:
     *
     * - `filters[]=operating_system:windows&filters[]=!country:US`
     */
    filters?: Array<string>;
    /**
     * Number of items to include in each timestamp's `value` list.
     *
     * The default is 10, and the maximum is 100.
     */
    limit?: number;
    /**
     * Value to order the results by
     */
    order_by?: 'negative_impact' | 'value' | 'views' | 'field';
    /**
     * Sort order.
     */
    order_direction?: 'asc' | 'desc';
    /**
     * Timeframe window to limit results by. Must be provided as an array query string
     * parameter (e.g. timeframe[]=).
     *
     * The default for this is the last 60 seconds of available data. Timeframes larger
     * than 10 minutes are not allowed, and must be within the last 24 hours.
     */
    timeframe?: Array<string>;
}
export interface MetricGetHistogramTimeseriesParams {
    /**
     * Limit the results to rows that match conditions from provided key:value pairs.
     * Must be provided as an array query string parameter.
     *
     * To exclude rows that match a certain condition, prepend a `!` character to the
     * dimension.
     *
     * Possible filter names are the same as returned by the List Monitoring Dimensions
     * endpoint.
     *
     * Example:
     *
     * - `filters[]=operating_system:windows&filters[]=!country:US`
     */
    filters?: Array<string>;
}
export interface MetricGetTimeseriesParams {
    /**
     * Limit the results to rows that match conditions from provided key:value pairs.
     * Must be provided as an array query string parameter.
     *
     * To exclude rows that match a certain condition, prepend a `!` character to the
     * dimension.
     *
     * Possible filter names are the same as returned by the List Monitoring Dimensions
     * endpoint.
     *
     * Example:
     *
     * - `filters[]=operating_system:windows&filters[]=!country:US`
     */
    filters?: Array<string>;
    /**
     * Timestamp to use as the start of the timeseries data. This value must be
     * provided as a unix timestamp. Defaults to 30 minutes ago.
     */
    timestamp?: number;
}
export declare namespace Metrics {
    export { type MetricListResponse as MetricListResponse, type MetricGetBreakdownResponse as MetricGetBreakdownResponse, type MetricGetBreakdownTimeseriesResponse as MetricGetBreakdownTimeseriesResponse, type MetricGetHistogramTimeseriesResponse as MetricGetHistogramTimeseriesResponse, type MetricGetTimeseriesResponse as MetricGetTimeseriesResponse, type MetricGetBreakdownParams as MetricGetBreakdownParams, type MetricGetBreakdownTimeseriesParams as MetricGetBreakdownTimeseriesParams, type MetricGetHistogramTimeseriesParams as MetricGetHistogramTimeseriesParams, type MetricGetTimeseriesParams as MetricGetTimeseriesParams, };
}
//# sourceMappingURL=metrics.d.ts.map