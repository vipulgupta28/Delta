// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../resource.mjs";
import { isRequestOptions } from "../../core.mjs";
import { BasePage } from "../../pagination.mjs";
export class Assets extends APIResource {
    /**
     * Create a new Mux Video asset.
     *
     * @example
     * ```ts
     * const asset = await client.video.assets.create({
     *   inputs: [
     *     { url: 'https://muxed.s3.amazonaws.com/leds.mp4' },
     *   ],
     *   playback_policies: ['public'],
     *   video_quality: 'basic',
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/video/v1/assets', {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Retrieves the details of an asset that has previously been created. Supply the
     * unique asset ID that was returned from your previous request, and Mux will
     * return the corresponding asset information. The same information is returned
     * when creating an asset.
     *
     * @example
     * ```ts
     * const asset = await client.video.assets.retrieve(
     *   'ASSET_ID',
     * );
     * ```
     */
    retrieve(assetId, options) {
        return this._client.get(`/video/v1/assets/${assetId}`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Updates the details of an already-created Asset with the provided Asset ID. This
     * currently supports only the `passthrough` field.
     *
     * @example
     * ```ts
     * const asset = await client.video.assets.update('ASSET_ID', {
     *   passthrough: 'Example',
     * });
     * ```
     */
    update(assetId, body, options) {
        return this._client.patch(`/video/v1/assets/${assetId}`, {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/video/v1/assets', AssetsBasePage, {
            query,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        });
    }
    /**
     * Deletes a video asset and all its data.
     *
     * @example
     * ```ts
     * await client.video.assets.delete('ASSET_ID');
     * ```
     */
    delete(assetId, options) {
        return this._client.delete(`/video/v1/assets/${assetId}`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Creates a playback ID that can be used to stream the asset to a viewer.
     *
     * @example
     * ```ts
     * const playbackId =
     *   await client.video.assets.createPlaybackId('ASSET_ID', {
     *     policy: 'public',
     *   });
     * ```
     */
    createPlaybackId(assetId, body, options) {
        return this._client.post(`/video/v1/assets/${assetId}/playback-ids`, {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Creates a static rendition (i.e. MP4) for an asset
     *
     * @example
     * ```ts
     * const response =
     *   await client.video.assets.createStaticRendition(
     *     'ASSET_ID',
     *     { resolution: 'highest' },
     *   );
     * ```
     */
    createStaticRendition(assetId, body, options) {
        return this._client.post(`/video/v1/assets/${assetId}/static-renditions`, {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Adds an asset track (for example, subtitles, or an alternate audio track) to an
     * asset. Assets must be in the `ready` state before tracks can be added.
     *
     * @example
     * ```ts
     * const track = await client.video.assets.createTrack(
     *   'ASSET_ID',
     *   {
     *     language_code: 'en-US',
     *     type: 'text',
     *     url: 'https://example.com/myVideo_en.srt',
     *     closed_captions: true,
     *     name: 'English',
     *     passthrough: 'English',
     *     text_type: 'subtitles',
     *   },
     * );
     * ```
     */
    createTrack(assetId, body, options) {
        return this._client.post(`/video/v1/assets/${assetId}/tracks`, {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Deletes a playback ID, rendering it nonfunctional for viewing an asset's video
     * content. Please note that deleting the playback ID removes access to the
     * underlying asset; a viewer who started playback before the playback ID was
     * deleted may be able to watch the entire video for a limited duration.
     *
     * @example
     * ```ts
     * await client.video.assets.deletePlaybackId(
     *   'ASSET_ID',
     *   'PLAYBACK_ID',
     * );
     * ```
     */
    deletePlaybackId(assetId, playbackId, options) {
        return this._client.delete(`/video/v1/assets/${assetId}/playback-ids/${playbackId}`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Deletes a single static rendition for an asset
     *
     * @example
     * ```ts
     * await client.video.assets.deleteStaticRendition(
     *   'ASSET_ID',
     *   'STATIC_RENDITION_ID',
     * );
     * ```
     */
    deleteStaticRendition(assetId, staticRenditionId, options) {
        return this._client.delete(`/video/v1/assets/${assetId}/static-renditions/${staticRenditionId}`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Removes a text or additional audio track from an asset. Neither video nor the
     * primary audio track can be removed.
     *
     * @example
     * ```ts
     * await client.video.assets.deleteTrack(
     *   'ASSET_ID',
     *   'TRACK_ID',
     * );
     * ```
     */
    deleteTrack(assetId, trackId, options) {
        return this._client.delete(`/video/v1/assets/${assetId}/tracks/${trackId}`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Generates subtitles (captions) for a given audio track. This API can be used for
     * up to 7 days after an asset is created.
     *
     * @example
     * ```ts
     * const tracks = await client.video.assets.generateSubtitles(
     *   'ASSET_ID',
     *   'TRACK_ID',
     *   {
     *     generated_subtitles: [
     *       {
     *         language_code: 'en',
     *         name: 'English (generated)',
     *         passthrough: 'English (generated)',
     *       },
     *     ],
     *   },
     * );
     * ```
     */
    generateSubtitles(assetId, trackId, body, options) {
        return this._client.post(`/video/v1/assets/${assetId}/tracks/${trackId}/generate-subtitles`, {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Returns a list of the input objects that were used to create the asset along
     * with any settings that were applied to each input.
     *
     * @example
     * ```ts
     * const inputInfos =
     *   await client.video.assets.retrieveInputInfo('ASSET_ID');
     * ```
     */
    retrieveInputInfo(assetId, options) {
        return this._client.get(`/video/v1/assets/${assetId}/input-info`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Retrieves information about the specified playback ID.
     *
     * @example
     * ```ts
     * const playbackId =
     *   await client.video.assets.retrievePlaybackId(
     *     'ASSET_ID',
     *     'PLAYBACK_ID',
     *   );
     * ```
     */
    retrievePlaybackId(assetId, playbackId, options) {
        return this._client.get(`/video/v1/assets/${assetId}/playback-ids/${playbackId}`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Allows you to add temporary access to the master (highest-quality) version of
     * the asset in MP4 format. A URL will be created that can be used to download the
     * master version for 24 hours. After 24 hours Master Access will revert to "none".
     * This master version is not optimized for web and not meant to be streamed, only
     * downloaded for purposes like archiving or editing the video offline.
     *
     * @example
     * ```ts
     * const asset = await client.video.assets.updateMasterAccess(
     *   'ASSET_ID',
     *   { master_access: 'temporary' },
     * );
     * ```
     */
    updateMasterAccess(assetId, body, options) {
        return this._client.put(`/video/v1/assets/${assetId}/master-access`, {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * This method has been deprecated. Please see the
     * [Static Rendition API](https://www.mux.com/docs/guides/enable-static-mp4-renditions#after-asset-creation).
     * Allows you to add or remove mp4 support for assets that were created without it.
     * The values supported are `capped-1080p`, `audio-only`,
     * `audio-only,capped-1080p`, `standard`(deprecated), and `none`. `none` means that
     * an asset _does not_ have mp4 support, so submitting a request with `mp4_support`
     * set to `none` will delete the mp4 assets from the asset in question.
     *
     * @deprecated
     */
    updateMP4Support(assetId, body, options) {
        return this._client.put(`/video/v1/assets/${assetId}/mp4-support`, {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
}
export class AssetsBasePage extends BasePage {
}
Assets.AssetsBasePage = AssetsBasePage;
//# sourceMappingURL=assets.mjs.map