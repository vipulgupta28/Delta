"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadsBasePage = exports.Uploads = void 0;
const resource_1 = require("../../resource.js");
const core_1 = require("../../core.js");
const pagination_1 = require("../../pagination.js");
class Uploads extends resource_1.APIResource {
    /**
     * Creates a new direct upload, through which video content can be uploaded for
     * ingest to Mux.
     *
     * @example
     * ```ts
     * const upload = await client.video.uploads.create({
     *   cors_origin: 'https://example.com/',
     *   new_asset_settings: { playback_policies: ['public'] },
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/video/v1/uploads', {
            body,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Fetches information about a single direct upload in the current environment.
     *
     * @example
     * ```ts
     * const upload = await client.video.uploads.retrieve(
     *   'abcd1234',
     * );
     * ```
     */
    retrieve(uploadId, options) {
        return this._client.get(`/video/v1/uploads/${uploadId}`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
    list(query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/video/v1/uploads', UploadsBasePage, {
            query,
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        });
    }
    /**
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes
     * after this request, no asset will be created. This request will only succeed if
     * the upload is still in the `waiting` state.
     *
     * @example
     * ```ts
     * const upload = await client.video.uploads.cancel(
     *   'abcd1234',
     * );
     * ```
     */
    cancel(uploadId, options) {
        return this._client.put(`/video/v1/uploads/${uploadId}/cancel`, {
            defaultBaseURL: 'https://api.mux.com',
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
}
exports.Uploads = Uploads;
class UploadsBasePage extends pagination_1.BasePage {
}
exports.UploadsBasePage = UploadsBasePage;
Uploads.UploadsBasePage = UploadsBasePage;
//# sourceMappingURL=uploads.js.map