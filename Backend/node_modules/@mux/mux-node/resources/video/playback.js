"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Playback = void 0;
const resource_1 = require("../../resource.js");
const core_1 = require("../../core.js");
class Playback extends resource_1.APIResource {
    animated(playbackId, extension, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.animated(playbackId, extension, {}, query);
        }
        return this._client.get(`/${playbackId}/animated.${extension}`, {
            query,
            defaultBaseURL: 'https://image.mux.com',
            ...options,
            headers: { Accept: 'image/gif', ...options?.headers },
            __binaryResponse: true,
        });
    }
    hls(playbackId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.hls(playbackId, {}, query);
        }
        return this._client.get(`/${playbackId}.m3u8`, {
            query,
            defaultBaseURL: 'https://stream.mux.com',
            ...options,
            headers: { Accept: 'application/vnd.apple.mpegurl', ...options?.headers },
            __binaryResponse: true,
        });
    }
    staticRendition(playbackId, filename, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.staticRendition(playbackId, filename, {}, query);
        }
        return this._client.get(`/${playbackId}/${filename}`, {
            query,
            defaultBaseURL: 'https://stream.mux.com',
            ...options,
            headers: { Accept: 'video/mp4', ...options?.headers },
            __binaryResponse: true,
        });
    }
    storyboard(playbackId, extension, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.storyboard(playbackId, extension, {}, query);
        }
        return this._client.get(`/${playbackId}/storyboard.${extension}`, {
            query,
            defaultBaseURL: 'https://image.mux.com',
            ...options,
            headers: { Accept: 'image/jpeg', ...options?.headers },
            __binaryResponse: true,
        });
    }
    storyboardMeta(playbackId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.storyboardMeta(playbackId, {}, query);
        }
        return this._client.get(`/${playbackId}/storyboard.json`, {
            query,
            defaultBaseURL: 'https://image.mux.com',
            ...options,
        });
    }
    storyboardVtt(playbackId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.storyboardVtt(playbackId, {}, query);
        }
        return this._client.get(`/${playbackId}/storyboard.vtt`, {
            query,
            defaultBaseURL: 'https://image.mux.com',
            ...options,
            headers: { Accept: 'text/vtt', ...options?.headers },
        });
    }
    thumbnail(playbackId, extension, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.thumbnail(playbackId, extension, {}, query);
        }
        return this._client.get(`/${playbackId}/thumbnail.${extension}`, {
            query,
            defaultBaseURL: 'https://image.mux.com',
            ...options,
            headers: { Accept: 'image/jpeg', ...options?.headers },
            __binaryResponse: true,
        });
    }
    track(playbackId, trackId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.track(playbackId, trackId, {}, query);
        }
        return this._client.get(`/${playbackId}/text/${trackId}.vtt`, {
            query,
            defaultBaseURL: 'https://stream.mux.com',
            ...options,
            headers: { Accept: 'text/vtt', ...options?.headers },
        });
    }
    transcript(playbackId, trackId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.transcript(playbackId, trackId, {}, query);
        }
        return this._client.get(`/${playbackId}/text/${trackId}.txt`, {
            query,
            defaultBaseURL: 'https://stream.mux.com',
            ...options,
            headers: { Accept: 'text/plain', ...options?.headers },
        });
    }
}
exports.Playback = Playback;
//# sourceMappingURL=playback.js.map